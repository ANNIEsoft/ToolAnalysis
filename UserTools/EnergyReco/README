#----- Tool: EnergyReco -----

This tool contains python scripts for:
i)  the muon energy reconstruction - BDT_MuonEnergyReco.py
ii) the neutrino energy reconstruction - BDT_NeutrinoEnergyReco.py

--- These scripts have been tested (locally) with:
python3: 3.4.9
and pip3 --version: pip 8.1.2 from /usr/lib/python3.4/site-packages (python 3.4)

Packages:                        Install using:
numpy: 1.16.2                    pip3 install numpy
pandas: 0.23.3                   pip3 install pandas
tensorflow: 1.13.1               pip3 install --user --upgrade tensorflow
matplotlib: 2.2.2                pip3 install matplotlib
sklearn: 0.19.1                  pip3 install sklearn

--- In ToolAnalysis they have been tested with: Python 2.7.5: 
To install packages use: yum -y install python-matplotlib
                         yum -y install python-pip 
                         pip install --upgrade pip
                         pip install package_name 
packages versions:
matplotlib.__version__ '1.2.0'
numpy.__version__ '1.16.1'
pandas.__version__ '0.24.1'
sklearn.__version__ '0.20.2'
tensorflow.__version__ '1.12.0'
root_numpy.__version__ '4.8.0' (this is no longer needed for the energy and track length reconstruction)

#--- Description of the methods:
* Training and test samples must be different to avoid biases and overtraining
* The input files for each script can be changed in the beginning of each file: 
   #--- evts for training:
   infile = "../LocalFolder/vars_Ereco.csv"
   #--- evts for prediction:
   infile2 = "../LocalFolder/vars_Ereco.csv"
   #----------------
* These files can reproduce the results of the DOE proposal.
* Due to lack of available statistics at the time, we used the same file, then split the sample in half and used different event samples for training/testing and different events for prediction/energy reconstruction. 

* TO DO:
  The aim is to use a large datasample for training/testing and fine-tune the algorithm. Then the prediction will be in collected data.  

* NEW: The training and prediction step has been split to two different scripts. In this way we avoid different trainings and we can all use 
the same training results to reconstruct the energy. For example you can use BDT_MuonEnergyReco_train.py to train the BDT
on the muon energy and save the weights of this step to finalized_BDTmodel_forMuonEnergy.sav. Using BDT_MuonEnergyReco_pred.py you can load the
weights from the training step and directly reconstruct the muon energy. Previously, these steps were incorporated in BDT_MuonEnergyReco.py.  
